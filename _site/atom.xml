<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>SADMIN</title>
 <link href="/atom.xml" rel="self"/>
 <link href="/"/>
 <updated>2021-03-08T10:40:13-05:00</updated>
 <id></id>
 <author>
   <name>Jacques Duplessis</name>
   <email>support@sadmin.ca</email>
 </author>

 
 <entry>
   <title>Welcome to Jekyll!</title>
   <link href="/jekyll/update/2021/03/07/welcome-to-jekyll/"/>
   <updated>2021-03-07T13:12:08-05:00</updated>
   <id>/jekyll/update/2021/03/07/welcome-to-jekyll</id>
   <content type="html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;Jekyll requires blog post files to be named according to the following format:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR-MONTH-DAY-title.MARKUP&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR&lt;/code&gt; is a four-digit number, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MONTH&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DAY&lt;/code&gt; are both two-digit numbers, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MARKUP&lt;/code&gt; is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Using SSH without entering password</title>
   <link href="/network/2021/03/04/ssh-and-scp-without-password/"/>
   <updated>2021-03-04T08:19:00-05:00</updated>
   <id>/network/2021/03/04/ssh-and-scp-without-password</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/assets/img/sadm_ssh.jpg&quot; class=&quot;align-left&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
Image by &lt;a href=&quot;https://pixabay.com/photos/?utm_source=link-attribution&amp;amp;utm_medium=referral&amp;amp;utm_campaign=image&amp;amp;utm_content=731198&quot;&gt;Free-Photos&lt;/a&gt; from &lt;a href=&quot;https://pixabay.com/?utm_source=link-attribution&amp;amp;utm_medium=referral&amp;amp;utm_campaign=image&amp;amp;utm_content=731198&quot;&gt;Pixabay&lt;/a&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;
In this article, we will demonstrate how to configure SSH in such a way that it will allow you to log from one server to another, without having to enter a password. When administrating a lot of Unix servers, there are some situation when you need to run a script from one server to another without entering a password. 
&lt;/p&gt;
&lt;p&gt;For example, let’s say that you need to take a cold backup of a Oracle database, but before starting it, you need to stop the application running on another server. In your Oracle backup script, you could “ssh” to application server and run a script that would stop the application before starting the backup.  But to do that with a script, you need a way to log on the application server without having to enter a password.&lt;/p&gt;

&lt;p&gt;Some environment are using the &lt;a href=&quot;http://www.openssh.com/&quot; title=&quot;OpenSSH Home page&quot;&gt;OpenSSH&lt;/a&gt; version on their Linux servers and the commercial &lt;a href=&quot;https://www.ssh.com/products/tectia-ssh/&quot;&gt;Tectia SSH&lt;/a&gt; on the &lt;a href=&quot;https://www.ibm.com/it-infrastructure/power/os/aix&quot; title=&quot;AIX Home Page at IBM&quot;&gt;AIX&lt;/a&gt; servers. OpenSSH and Tectia SSH don’t have the same keys format and depending on the version you are running,  making an automated connection between these two version can become tricky. In our examples, we will demonstrate the setup require, so that user “robert” is able to log from server1 to server2 without having to enter a password in a mixed environment of OpenSSH and Tectia SSH.&lt;/p&gt;

&lt;h4 id=&quot;openssh-server-configuration-etcsshsshd_config&quot;&gt;OpenSSH server configuration (/etc/ssh/sshd_config)&lt;/h4&gt;

&lt;p&gt;If you are using OpenSSH and you have secure your ssh environnent, chance are that you disable direct “root” access to your server with the line “PermitRootLogin no” in your ssh daemon configuration file. If you change that line with “PermitRootLogin without-password”, then direct login to “root” would still be refuse.  But, if you have configure your server to accept public key identification (PubkeyAuthentication yes) and that the proper setup is done, you should be able to log on the server with no password.  Below is the Openssh configuration file that I use for all the examples below.**&lt;br /&gt;
**&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;err&quot;&gt;Port                    &lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Protocol                &lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;SyslogFacility          &lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;AUTH&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;SyslogFacility          &lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;AUTHPRIV&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;LoginGraceTime          &lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;120&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;PermitRootLogin         &lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;without-password&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;PubkeyAuthentication   &lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;yes&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;HostbasedAuthentication&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;no&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;PasswordAuthentication &lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;yes&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;RhostsRSAAuthentication&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;no&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;IgnoreRhosts            &lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;yes&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;StrictModes             &lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;yes&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;UsePrivilegeSeparation &lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;yes&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;AllowTcpForwarding      &lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;no&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Forwarding           &lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;yes&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Subsystem&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;sftp          &lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/usr/libexec/openssh/sftp-server&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The OpenSSH version used for all the examples below is ;&lt;/p&gt;

&lt;pre&gt;# ssh -V
OpenSSH_4.3p2, OpenSSL 0.9.8e-fips-rhel5 01 Jul 2008&lt;/pre&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;span style=&quot;font-size: medium;&quot;&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;font-size: medium;&quot;&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h4 id=&quot;tectia-ssh-server-configuration-etcssh2ssh-server-configxml&quot;&gt;Tectia SSH server configuration (/etc/ssh2/ssh-server-config.xml)&lt;/h4&gt;

&lt;p&gt;The only action needed to permit public key authentication for users is to list ‘publickey’ as an allowed authentication method in the &lt;em&gt;ssh-server-config.xml&lt;/em&gt; file:&lt;/p&gt;

&lt;pre&gt;&amp;lt;authentication-methods&amp;gt;
  &amp;lt;authentication action=&quot;allow&quot;&amp;gt;
    &amp;lt;auth-publickey /&amp;gt;
    ...
  &amp;lt;/authentication&amp;gt;
&amp;lt;/authentication-methods&amp;gt;&lt;/pre&gt;

&lt;p&gt;Other authentication methods can also be allowed. Place the least interactive method first.&lt;/p&gt;

&lt;p&gt;For all the Tectia SSH examples below we used the following version ;&lt;/p&gt;

&lt;pre&gt;# sshg3 -V
sshg3.bin: SSH Tectia Client 6.1.3 on powerpc-ibm-aix5.1.0.0
Build: 59
Product: SSH Tectia Client&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;-&quot;&gt;** &lt;span style=&quot;color: #0000ff;&quot;&gt;&lt;/span&gt;**&lt;/h2&gt;

&lt;h2 id=&quot;--1&quot;&gt;** &lt;span style=&quot;color: #0000ff;&quot;&gt;&lt;/span&gt;**&lt;/h2&gt;

&lt;h2 id=&quot;automating-ssh-connection-from-openssh-to-openssh&quot;&gt;&lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;Automating SSH connection from OpenSSH to OpenSSH&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://192.168.1.88/wp-content/uploads/2009/11/openssh_2_openssh1.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;size-medium wp-image-1134 alignnone&quot; title=&quot;openssh_2_openssh&quot; src=&quot;http://192.168.1.88/wp-content/uploads/2009/11/openssh_2_openssh1-300x212.PNG&quot; alt=&quot;openssh_2_openssh&quot; width=&quot;300&quot; height=&quot;212&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;!--more--&gt;
&lt;p&gt;This example demonstrate how to setup public key authentication so that user “robert” can log from server1 (OpenSSH) to server2 (OpenSSH), without having to enter a password.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1) Generate the private and public key for user “robert” on server1.&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;robert@server1:~$ &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;ssh-keygen&lt;/span&gt;
&lt;/strong&gt;Generating public/private rsa key pair.
Enter file in which to save the key (/home/robert/.ssh/id_rsa):
Created directory '/home/robert/.ssh'.
Enter passphrase (empty for no passphrase): &lt;span style=&quot;color: #0000ff;&quot;&gt;&lt;strong&gt;&amp;lt;CR&amp;gt;&lt;/strong&gt;&lt;/span&gt;
Enter same passphrase again: &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;lt;CR&amp;gt;&lt;/span&gt;&lt;/strong&gt;
Your identification has been saved in /home/robert/.ssh/id_rsa.
Your public key has been saved in /home/robert/.ssh/id_rsa.pub.
The key fingerprint is:
6f:17:ac:ac:b6:9c:13:90:57:aa:ee:1c:b1:e0:93:e2
&lt;a href=&quot;mailto:robert@server1robert@server1:~$&quot;&gt;robert@server1

robert@server1:~$&lt;/a&gt; &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;cd .ssh&lt;/span&gt;&lt;/strong&gt;
robert@server1:~/.ssh$ &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;ls -l&lt;/span&gt;&lt;/strong&gt;
total 3
-rw------- 1 robert robert 1675 Nov 22 08:19 &lt;span style=&quot;color: #0000ff;&quot;&gt;id_rsa&lt;/span&gt;
-rw-r--r-- 1 robert robert  404 Nov 22 08:19 &lt;span style=&quot;color: #0000ff;&quot;&gt;id_rsa.pub&lt;/span&gt;
robert@server1:~/.ssh$&lt;/pre&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;2) Copy the public key file to a more descriptive name.&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;robert@server1:~/.ssh$&lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt; cp id_rsa.pub server1_rsa.pub&lt;/span&gt;&lt;/strong&gt;
robert@server1:~/.ssh$ &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;ls -l&lt;/span&gt;&lt;/strong&gt;
total 4
-rw------- 1 robert robert 1675 Nov 22 08:19 id_rsa
-rw-r--r-- 1 robert robert  404 Nov 22 08:19 id_rsa.pub
-rw-r--r-- 1 robert robert  404 Nov 22 08:24 &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;server1_rsa.pub&lt;/span&gt;&lt;/strong&gt;
robert@server1:~/.ssh$&lt;/pre&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;3) Create the .ssh directory on the remote server and copy the public key from server1 onto server2.&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;robert@server2:~$&lt;strong&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;pwd&lt;/span&gt;&lt;/strong&gt;
&lt;strong&gt;/home/robert&lt;/strong&gt;
robert@server2:~$ &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;mkdir .ssh&lt;/span&gt;&lt;/strong&gt;
robert@server2:~$ &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;chmod 700 .ssh&lt;/span&gt;&lt;/strong&gt;
robert@server2:~$ &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;cd .ssh&lt;/span&gt;&lt;/strong&gt;
robert@server2:~/.ssh$ &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;scp robert@server1:/home/robert/.ssh/server1_rsa.pub .&lt;/span&gt;&lt;/strong&gt;
The authenticity of host 'server1 (192.168.1.101)' can't be established.
RSA key fingerprint is b4:8d:56:71:c9:7e:97:ba:79:87:95:0d:8a:29:fc:9a.
Are you sure you want to continue connecting (yes/no)? &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;yes&lt;/span&gt;&lt;/strong&gt;
Warning: Permanently added 'server1,192.168.1.101' (RSA) to the list of known hosts.
robert@server1's password: &lt;span style=&quot;color: #0000ff;&quot;&gt;&lt;strong&gt;*********&lt;/strong&gt;&lt;/span&gt;
server1_rsa.pub                                    100%  404     0.4KB/s   00:00&lt;/pre&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;4) Add “robert” public key from server1 to the authorized_keys file on server2&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;robert@server2:~/.ssh$ &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;ls -l&lt;/span&gt;&lt;/strong&gt;
total 2
-rw-r--r-- 1 robert robert 401 Nov 22 08:29 known_hosts
-rw-r--r-- 1 robert robert 404 Nov 22 08:31 &lt;span style=&quot;color: #0000ff;&quot;&gt;&lt;strong&gt;server1_rsa.pub&lt;/strong&gt;&lt;/span&gt;
robert@server2:~/.ssh$
robert@server2:~/.ssh$ &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;cat server1_rsa.pub &amp;gt;&amp;gt; authorized_keys&lt;/span&gt;&lt;/strong&gt;
robert@server2:~/.ssh$ &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;chmod 644 authorized_keys&lt;/span&gt;&lt;/strong&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;5) Test our automated ssh connection from server1 to server2&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The first time you will need to accept connection. After that first connection, there will be no confirmation needed.&lt;/p&gt;

&lt;pre&gt;robert@server1:~/.ssh$ &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;ssh server2&lt;/span&gt;&lt;/strong&gt;
The authenticity of host 'server2 (192.168.1.133)' can't be established.
RSA key fingerprint is 28:cc:97:fb:ec:79:94:7f:bf:ef:82:bd:d2:c4:41:d2.
Are you sure you want to continue connecting (yes/no)? &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;yes&lt;/span&gt;&lt;/strong&gt;
Warning: Permanently added 'server2,192.168.1.133' (RSA) to the list of known hosts.
robert@server2:~$

&lt;span style=&quot;color: #0000ff;&quot;&gt;&lt;strong&gt;robert@server1&lt;/strong&gt;&lt;/span&gt;:~/.ssh$ &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;ssh server2&lt;/span&gt;&lt;/strong&gt;
Last login: Sun Nov 22 08:36:41 2009 from server1.maison.ca
&lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;robert@server2&lt;/span&gt;&lt;/strong&gt;:~$&lt;/pre&gt;

&lt;h2 id=&quot;--2&quot;&gt;** &lt;span style=&quot;color: #0000ff;&quot;&gt;&lt;/span&gt;**&lt;/h2&gt;

&lt;h2 id=&quot;--3&quot;&gt;** &lt;span style=&quot;color: #0000ff;&quot;&gt;&lt;/span&gt;**&lt;/h2&gt;

&lt;h2 id=&quot;automating-ssh-connection-from-openssh-to-tectia-ssh&quot;&gt;&lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;Automating SSH connection from OpenSSH to Tectia SSH&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://192.168.1.88/wp-content/uploads/2009/11/openssh2ssh2.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignnone size-medium wp-image-1137&quot; title=&quot;openssh2ssh2&quot; src=&quot;http://192.168.1.88/wp-content/uploads/2009/11/openssh2ssh2-300x229.PNG&quot; alt=&quot;openssh2ssh2&quot; width=&quot;300&quot; height=&quot;229&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This example demonstrate how to setup public key authentication so that user “robert” can log from server1 (OpenSSH) to server2 (Tectia SSH), without having to enter a password.&lt;/p&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;1) Generate “robert” private and public keys on the local server (server1).&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;robert@server1:~$ &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;ssh-keygen&lt;/span&gt;&lt;/strong&gt;
Generating public/private rsa key pair.
Enter file in which to save the key (/home/robert/.ssh/id_rsa):
Created directory '/home/robert/.ssh'.
Enter passphrase (empty for no passphrase): &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;lt;CR&amp;gt;&lt;/span&gt;&lt;/strong&gt;
Enter same passphrase again: &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;lt;CR&amp;gt;&lt;/span&gt;&lt;/strong&gt;
Your identification has been saved in /home/robert/.ssh/id_rsa.
Your public key has been saved in /home/robert/.ssh/id_rsa.pub.
The key fingerprint is:
6f:17:ac:ac:b6:9c:13:90:57:aa:ee:1c:b1:e0:93:e2
&lt;a href=&quot;mailto:robert@server1robert@server1:~$&quot;&gt;robert@server1:~$&lt;/a&gt;

&lt;a href=&quot;mailto:robert@server1:~$&quot;&gt;robert@server1:~$&lt;/a&gt; &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;cd .ssh&lt;/span&gt;&lt;/strong&gt;
robert@server1:~/.ssh$ &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;ls -l&lt;/span&gt;&lt;/strong&gt;
total 3
-rw------- 1 robert robert 1675 Nov 22 08:19 &lt;span style=&quot;color: #0000ff;&quot;&gt;&lt;strong&gt;id_rsa&lt;/strong&gt;&lt;/span&gt;
-rw-r--r-- 1 robert robert  404 Nov 22 08:19 &lt;span style=&quot;color: #0000ff;&quot;&gt;&lt;strong&gt;id_rsa.pub&lt;/strong&gt;&lt;/span&gt;
robert@server1:~/.ssh$&lt;/pre&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;2) Copy the public key to a more descriptive name and convert to Tectia SSH format&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;a href=&quot;mailto:robert@server1:~/.ssh$&quot;&gt;robert@server1:~/.ssh$&lt;/a&gt; &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;cp id_rsa.pub server1_rsa.pub&lt;/span&gt;&lt;/strong&gt;
robert@server1:~/.ssh$ &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;ssh-keygen -e -f server1_rsa.pub &amp;gt; server1_ssh2.pub&lt;/span&gt;&lt;/strong&gt;
robert@server1:~/.ssh$ ls -l
total 6
-rw------- 1 robert robert 1675 Nov 22 08:19 id_rsa
-rw-r--r-- 1 robert robert  404 Nov 22 08:19 id_rsa.pub
-rw-r--r-- 1 robert robert  401 Nov 22 08:36 known_hosts
-rw-r--r-- 1 robert robert  404 Nov 22 08:24 server1_rsa.pub
-rw-rw-r-- 1 robert robert  514 Nov 22 10:15 &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;server1_ssh2.pub&lt;/span&gt;&lt;/strong&gt;
robert@server1:~/.ssh$&lt;/pre&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;3) From the remote server (server2) get “robert” Tectia SSH public key from server1.&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;a href=&quot;mailto:robert@server2:~/$&quot;&gt;&lt;span style=&quot;color: #000000;&quot;&gt;robert@server2:~/$&lt;/span&gt;&lt;/a&gt; &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;ls -al&lt;/span&gt;&lt;/strong&gt;
total 4
drwxr-xr-x   2 robert   staff           512 Nov 22 08:59 .
drwxr-xr-x   7 bin      bin             512 Nov 22 08:58 ..
-rwxr-----   1 robert   staff           254 Nov 22 08:58 .profile
-rw-------   1 robert   staff           110 Nov 22 10:08 .sh_history

robert@server2:~/$ &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;mkdir .ssh2&lt;/span&gt;&lt;/strong&gt;
robert@server2:~/$ &lt;span style=&quot;color: #0000ff;&quot;&gt;&lt;strong&gt;chmod 700 .ssh2&lt;/strong&gt;&lt;/span&gt;
robert@server2:~/$ &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;cd .ssh2&lt;/span&gt;&lt;/strong&gt;
robert@server2:~/$ &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;scpg3 robert@server1:/home/robert/.ssh/server1_ssh2.pub .&lt;/span&gt;&lt;/strong&gt; (replace scpg3 by scp if using V4)
robert@server1 password: &lt;span style=&quot;color: #0000ff;&quot;&gt;&lt;strong&gt;********&lt;/strong&gt;&lt;/span&gt;
server1_rsa_ssh2.pub                        |   514B |   3.7kiB/s | TOC: 00:00:00 | 100%
robert@server2:~/$&lt;/pre&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;4) Add “robert” public key on server1 to the authorization file on server2.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;a href=&quot;mailto:robert@server2:~/$&quot;&gt;robert@server2:~/$&lt;/a&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;&lt;strong&gt;echo &quot;Key server1_ssh2.pub&quot; &amp;gt;&amp;gt; ~/.ssh2/authorization&lt;/strong&gt;&lt;/span&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;5) Test our automated ssh connection from server1 to server2&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;robert@server1:~/.ssh$ &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;ssh robert@server2&lt;/span&gt;&lt;/strong&gt;
The authenticity of host 'server2 (192.168.1.130)' can't be established.
RSA key fingerprint is cb:98:02:be:4c:0d:80:8e:bc:20:cf:45:03:fc:70:54.
Are you sure you want to continue connecting (yes/no)? &lt;span style=&quot;color: #0000ff;&quot;&gt;&lt;strong&gt;yes&lt;/strong&gt;&lt;/span&gt;
Warning: Permanently added 'server2,192.168.1.130' (RSA) to the list of known hosts.
&lt;span style=&quot;color: #0000ff;&quot;&gt;&lt;strong&gt;robert@server2&lt;/strong&gt;&lt;/span&gt;:~/.ssh$ 

robert@server1:~/.ssh$ &lt;span style=&quot;color: #0000ff;&quot;&gt;&lt;strong&gt;ssh robert@server2 date&lt;/strong&gt;&lt;/span&gt;
Sun Nov 22 10:16:06 EST 2009
robert@server1:~/.ssh$&lt;/pre&gt;

&lt;h2 id=&quot;--4&quot;&gt;** &lt;span style=&quot;color: #0000ff;&quot;&gt;&lt;/span&gt;**&lt;/h2&gt;

&lt;h2 id=&quot;--5&quot;&gt;** &lt;span style=&quot;color: #0000ff;&quot;&gt;&lt;/span&gt;**&lt;/h2&gt;

&lt;h2 id=&quot;automating-ssh-connection-from-tectia-ssh-to-openssh&quot;&gt;&lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;Automating SSH connection from Tectia SSH to OpenSSH&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://192.168.1.88/wp-content/uploads/2009/11/ssh2_2_openssh.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignnone size-medium wp-image-1139&quot; title=&quot;ssh2_2_openssh&quot; src=&quot;http://192.168.1.88/wp-content/uploads/2009/11/ssh2_2_openssh-300x223.PNG&quot; alt=&quot;ssh2_2_openssh&quot; width=&quot;300&quot; height=&quot;223&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This example demonstrate how to setup public key authentication so that user “robert” can log from server1 (Tectia SSH) to server2 (OpenSSH), without having to enter a password.&lt;/p&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;1) Generate  Tectia SSH private and public keys for user “robert” on server1.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;a href=&quot;mailto:robert@server1:~/$&quot;&gt;robert@server1:~/&lt;/a&gt;&lt;a href=&quot;mailto:robert@server1:~/$&quot;&gt;$&lt;/a&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;&lt;strong&gt;ssh-keygen-g3&lt;/strong&gt;&lt;/span&gt; (use ssh-key if using V4)
Generating 2048-bit dsa key pair
153 oOOo.oOo.oOo
Key generated.
2048-bit dsa, robert@server1, Sun Nov 22 2009 19:21:21 -0500
Passphrase :&lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt; &amp;lt;CR&amp;gt;&lt;/span&gt;&lt;/strong&gt;
Again      :&lt;span style=&quot;color: #0000ff;&quot;&gt;&lt;strong&gt; &amp;lt;CR&amp;gt;&lt;/strong&gt;&lt;/span&gt;
Key is stored with NULL passphrase.
(You can ignore the following warning if you are generating hostkeys.)
This is not recommended. Don't do this unless you know what you're doing.
If file system protections fail (someone can access the keyfile),
or if the super-user is malicious, your key can be used without the deciphering effort.
Private key saved to /home/robert/.ssh2/id_dsa_2048_a
Public key saved to /home/robert/.ssh2/id_dsa_2048_a.pub
&lt;a href=&quot;mailto:robert@server1:~/$&quot;&gt;robert@server1:~/&lt;/a&gt;$
&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;1a) Identify the private key name in the identification file (&lt;em&gt;Not needed for version 5 and above&lt;/em&gt;)&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;robert@server1:~/ $ &lt;strong&gt;echo &quot;IdKey id_dsa_2048_a&lt;/strong&gt;&lt;strong&gt;&quot; &amp;gt;&amp;gt; identification&lt;/strong&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;2) Copy the public key to a more descriptive name.&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;a href=&quot;mailto:robert@server1:~/$&quot;&gt;robert@server1:~/&lt;/a&gt;$&lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt; pwd&lt;/span&gt;&lt;/strong&gt;
/home/robert
&lt;a href=&quot;mailto:robert@server1:~/$&quot;&gt;robert@server1:~/&lt;/a&gt;$ &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;cd .ssh2&lt;/span&gt;&lt;/strong&gt;
&lt;a href=&quot;mailto:robert@server1:~/$&quot;&gt;robert@server1:~/&lt;/a&gt;$ &lt;span style=&quot;color: #0000ff;&quot;&gt;&lt;strong&gt;ls -l&lt;/strong&gt;&lt;/span&gt;
total 11
-rw-------   1 robert   staff          1389 Nov 22 19:25 id_dsa_2048_a
-rw-r--r--   1 robert   staff          1257 Nov 22 19:25 &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;id_dsa_2048_a.pub&lt;/span&gt;&lt;/strong&gt;
&lt;a href=&quot;mailto:robert@server1:~/$&quot;&gt;robert@server1:~/&lt;/a&gt;$ &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;cp id_dsa_2048_a.pub server1_ssh2.pub&lt;/span&gt;&lt;/strong&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;3) From the remote server (server2) get “robert” Tectia SSH public key from server1.&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;robert@server2:~$ &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;pwd&lt;/span&gt;&lt;/strong&gt;
/home/robert
robert@server2:~$ &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;mkdir .ssh&lt;/span&gt;&lt;/strong&gt;
robert@server2:~$ &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;chmod 700 .ssh&lt;/span&gt;&lt;/strong&gt;
robert@server2:~$ &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;cd .ssh&lt;/span&gt;&lt;/strong&gt;
robert@server2:~/.ssh$ &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;scp robert@server1:/home/robert/.ssh2/server1_ssh2.pub .&lt;/span&gt;&lt;/strong&gt;
The authenticity of host 'server1' (192.168.1.130)' can't be established.
RSA key fingerprint is cb:98:02:be:4c:0d:80:8e:bc:20:cf:45:03:fc:70:54.
Are you sure you want to continue connecting (yes/no)? &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;yes&lt;/span&gt;&lt;/strong&gt;
Warning: Permanently added 'server1,192.168.1.130' (RSA) to the list of known hosts.
Password Authentication:
robert's password: &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;********&lt;/span&gt;&lt;/strong&gt;

server1_ssh2.pub                                            100% 1257     1.2KB/s   00:00&lt;/pre&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;4) Convert Tectia SSH key to OpenSSH format &amp;amp; add it to the authorization file.&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;robert@server2:~/.ssh$ &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;ssh-keygen -i -f server1_ssh2.pub &amp;gt; server1_ssh.pub&lt;/span&gt;&lt;/strong&gt;
robert@server2:~/.ssh$ &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;cat server1_ssh.pub &amp;gt;&amp;gt; authorized_keys&lt;/span&gt;&lt;/strong&gt;
robert@server2:~/.ssh$ &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;chmod 644 authorized_keys&lt;/span&gt;&lt;/strong&gt;
&lt;span style=&quot;color: #0000ff;&quot;&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;5) Test “robert” automated ssh connection from server1 to server2&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;a href=&quot;mailto:robert@server1:~/$&quot;&gt;robert@server1:~/$&lt;/a&gt; &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;sshg3 robert@server2&lt;/span&gt;&lt;/strong&gt;
Please select how you want to proceed.
cancel) Cancel the connection.
once) Proceed with the connection but do not save the key.
save) Proceed with the connection and save the key for future use.
Please select one (cancel, once, save): &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;save&lt;/span&gt;&lt;/strong&gt;
Authentication successful.
Last login: Sun Nov 22 08:38:03 2009 from server1.maison.ca
robert@server2:~$

&lt;a href=&quot;mailto:robert@server1:~/$&quot;&gt;robert@server1:~/&lt;/a&gt;$ &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;sshg3 robert@server1 date&lt;/span&gt;&lt;/strong&gt;
Authentication successful.
Sun Nov 22 19:56:04 EST 2009
&lt;a href=&quot;mailto:robert@server1:~/$&quot;&gt;robert@server1:~/&lt;/a&gt;$&lt;/pre&gt;

&lt;h2 id=&quot;--6&quot;&gt;** &lt;span style=&quot;color: #0000ff;&quot;&gt;&lt;/span&gt;**&lt;/h2&gt;

&lt;h2 id=&quot;--7&quot;&gt;** &lt;span style=&quot;color: #0000ff;&quot;&gt;&lt;/span&gt;**&lt;/h2&gt;

&lt;h2 id=&quot;automating-ssh-connection-from-tectia-ssh-to-tectia-ssh&quot;&gt;&lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;Automating SSH connection from Tectia SSH to Tectia SSH&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://192.168.1.88/wp-content/uploads/2009/11/ssh2_2_ssh2.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignnone size-medium wp-image-1140&quot; title=&quot;ssh2_2_ssh2&quot; src=&quot;http://192.168.1.88/wp-content/uploads/2009/11/ssh2_2_ssh2-300x216.PNG&quot; alt=&quot;ssh2_2_ssh2&quot; width=&quot;300&quot; height=&quot;216&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This example demonstrate the step needed so that user “robert” can log from server1 (Tectia SSH) to server2 who is also running Tectia SSH, without having to enter a password.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;1) Generate “robert” Tectia SSH private and public keys on server1.&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;a href=&quot;mailto:robert@server1:~/$&quot;&gt;robert@server1:~/&lt;/a&gt;&lt;a href=&quot;mailto:robert@server1:~/$&quot;&gt;$&lt;/a&gt; &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;ssh-keygen-g3&lt;/span&gt;&lt;/strong&gt; (ssh-keygen for version 4)
Generating 2048-bit dsa key pair
153 oOOo.oOo.oOo
Key generated.
2048-bit dsa, &lt;a href=&quot;mailto:robert@server1&quot;&gt;robert@server1&lt;/a&gt;, Sun Nov 22 2009 19:21:21 -0500
Passphrase : &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;lt;CR&amp;gt;&lt;/span&gt;&lt;/strong&gt;
Again      : &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;lt;CR&amp;gt;&lt;/span&gt;&lt;/strong&gt;
Key is stored with NULL passphrase.
(You can ignore the following warning if you are generating hostkeys.)
This is not recommended. Don't do this unless you know what you're doing.
If file system protections fail (someone can access the keyfile),
or if the super-user is malicious, your key can be used without the deciphering effort.
Private key saved to /home/robert/.ssh2/id_dsa_2048_a
Public key saved to /home/robert/.ssh2/id_dsa_2048_a.pub
&lt;a href=&quot;mailto:robert@server1:~/$&quot;&gt;robert@server1:~/&lt;/a&gt;&lt;a href=&quot;mailto:robert@server1:~/$&quot;&gt;$&lt;/a&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;2) Copy the public key to a more descriptive name.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;pre&gt;robert@server1:~$ &lt;span style=&quot;color: #0000ff;&quot;&gt;&lt;strong&gt;pwd&lt;/strong&gt;&lt;/span&gt;
/home/robert
robert@server1:~ $ c&lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;d .ssh2&lt;/span&gt;&lt;/strong&gt;
robert@server1:~ $ &lt;span style=&quot;color: #0000ff;&quot;&gt;&lt;strong&gt;ls -l&lt;/strong&gt;
&lt;/span&gt;total 11
-rw-------   1 robert   staff          1389 Nov 22 19:25 id_dsa_2048_a
-rw-r--r--   1 robert   staff          1257 Nov 22 19:25 &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;id_dsa_2048_a.pub&lt;/span&gt;&lt;/strong&gt;
robert@server1:~ $
robert@server1:~ $ &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;cp id_dsa_2048_a.pub server1_ssh2.pub&lt;/span&gt;&lt;/strong&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;3) Identify the private key name in the identification file (&lt;em&gt;&lt;span style=&quot;color: #800000;&quot;&gt;Not needed for version 5 and above&lt;/span&gt;&lt;/em&gt;)&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;robert@server1:~/ $ &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;echo &quot;IdKey id_dsa_2048_a&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&quot; &amp;gt;&amp;gt; identification&lt;/span&gt;&lt;/strong&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;4) Get “robert” Tectia SSH public key from server1 onto server2.&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;a href=&quot;mailto:robert@server2:~/&quot;&gt;robert@server2:~/&lt;/a&gt;&lt;a href=&quot;mailto:robert@server1:~/$&quot;&gt;$&lt;/a&gt; &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;scpg3 &lt;/span&gt;&lt;/strong&gt;&lt;a href=&quot;mailto:robert@server1:/home/robert/.ssh2/server1_ssh2.pub&quot;&gt;&lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;robert@server1:/home/robert/.ssh2/server1_ssh2.pub&lt;/span&gt;&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt; .&lt;/span&gt;&lt;/strong&gt; (use scp in V4)
robert@server1s password: &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;********&lt;/span&gt;&lt;/strong&gt;
server1_ssh2.pub                                   |   514B |   3.7kiB/s | TOC: 00:00:00 | 100%
&lt;a href=&quot;mailto:robert@server2:~/&quot;&gt;robert@server2:~/&lt;/a&gt;&lt;a href=&quot;mailto:robert@server1:~/$&quot;&gt;$&lt;/a&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;5) Add “robert” public key from  server1 to the authorization file on server2.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;a href=&quot;mailto:robert@server2:~/$&quot;&gt;robert@server2:~/$&lt;/a&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;&lt;strong&gt;echo &quot;Key server1_ssh2.pub&quot; &amp;gt;&amp;gt; ~/.ssh2/authorization&lt;/strong&gt;&lt;/span&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;6) Test our automated ssh connection from server1 to server2&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;a href=&quot;mailto:robert@server1:~/$&quot;&gt;robert@server1:~/&lt;/a&gt;&lt;a href=&quot;mailto:robert@server1:~/$&quot;&gt;$&lt;/a&gt; &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;sshg3 &lt;/span&gt;&lt;/strong&gt;&lt;a href=&quot;mailto:robert@server2&quot;&gt;&lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;robert@server2&lt;/span&gt;&lt;/strong&gt;&lt;/a&gt;
Please select how you want to proceed.
cancel) Cancel the connection.
once) Proceed with the connection but do not save the key.
save) Proceed with the connection and save the key for future use.
Please select one (cancel, once, save): &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;save&lt;/span&gt;&lt;/strong&gt;
Authentication successful.
Last login: Sun Nov 22 08:38:03 2009 from server1.maison.ca
&lt;a href=&quot;mailto:robert@server2:~$&quot;&gt;&lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;robert@server2:~$&lt;/span&gt;&lt;/strong&gt;&lt;/a&gt;

&lt;a href=&quot;mailto:robert@server1:~/$&quot;&gt;robert@server1:~/&lt;/a&gt;&lt;a href=&quot;mailto:robert@server1:~/$&quot;&gt;$&lt;/a&gt; &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;sshg3 robert@server1 date&lt;/span&gt;&lt;/strong&gt;
Authentication successful.
Sun Nov 22 19:56:04 EST 2009
&lt;a href=&quot;mailto:robert@server1:~/$&quot;&gt;robert@server1:~/&lt;/a&gt;&lt;a href=&quot;mailto:robert@server1:~/$&quot;&gt;$&lt;/a&gt;&lt;/pre&gt;

&lt;p&gt;Hope this article will be usefull for many of us and I hope that you will come back to it when ever you need it.&lt;/p&gt;

&lt;p&gt;See you soon.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Linux Administration Books for Free</title>
   <link href="/general/2021/03/02/linux-administration-books-for-free/"/>
   <updated>2021-03-02T14:40:52-05:00</updated>
   <id>/general/2021/03/02/linux-administration-books-for-free</id>
   <content type="html">&lt;p&gt;A short post to list some free books for Linux users and administrators, take a look you might find one that you would like to have.&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/assets/img/sadm_books.jpg&quot; class=&quot;align-left&quot; alt=&quot;&quot; /&gt;
Image by &lt;a href=&quot;https://pixabay.com/users/blende12-201217/?utm_source=link-attribution&amp;amp;utm_medium=referral&amp;amp;utm_campaign=image&amp;amp;utm_content=1659717&quot;&gt;Gerhard G.&lt;/a&gt; from &lt;a href=&quot;https://pixabay.com/?utm_source=link-attribution&amp;amp;utm_medium=referral&amp;amp;utm_campaign=image&amp;amp;utm_content=1659717&quot;&gt;Pixabay&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Revision 1.1 - 2 March 2021 -&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;The Linux Command Line&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Have a brief look at the book from this &lt;a href=&quot;http://linuxcommand.org/tlcl.php&quot;&gt;page&lt;/a&gt; and &lt;a href=&quot;https://sourceforge.net/projects/linuxcommand/files/TLCL/19.01/TLCL-19.01.pdf/download&quot;&gt;download the book&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The &lt;strong&gt;Pro Git book&lt;/strong&gt;, written by Scott Chacon and Ben Straub and published by Apress, is available &lt;a href=&quot;https://git-scm.com/book/en/v2&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://github.com/progit/progit2/releases/download/2.1.295/progit.pdf&quot;&gt;download the book&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;The Debian Administrator’s Handbook&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Written by two Debian developers — Raphaël Hertzog and Roland Mas — the Debian Administrator’s Handbook&lt;/li&gt;
      &lt;li&gt;Take a look at the home &lt;a href=&quot;https://debian-handbook.info/&quot;&gt;page&lt;/a&gt; and &lt;a href=&quot;http://debian-handbook.info/download/stable/debian-handbook.pdf&quot;&gt;download the book&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
See you soon !
&lt;br /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Introducing Lanyon</title>
   <link href="/2020/04/03/introducing-lanyon/"/>
   <updated>2020-04-03T00:00:00-04:00</updated>
   <id>/2020/04/03/introducing-lanyon</id>
   <content type="html">&lt;p&gt;Lanyon is an unassuming &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; theme that places content first by tucking away navigation in a hidden drawer. It’s based on &lt;a href=&quot;http://getpoole.com&quot;&gt;Poole&lt;/a&gt;, the Jekyll butler.&lt;/p&gt;

&lt;h3 id=&quot;built-on-poole&quot;&gt;Built on Poole&lt;/h3&gt;

&lt;p&gt;Poole is the Jekyll Butler, serving as an upstanding and effective foundation for Jekyll themes by &lt;a href=&quot;https://twitter.com/mdo&quot;&gt;@mdo&lt;/a&gt;. Poole, and every theme built on it (like Lanyon here) includes the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Complete Jekyll setup included (layouts, config, &lt;a href=&quot;/404&quot;&gt;404&lt;/a&gt;, &lt;a href=&quot;/atom.xml&quot;&gt;RSS feed&lt;/a&gt;, posts, and &lt;a href=&quot;/about&quot;&gt;example page&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Mobile friendly design and development&lt;/li&gt;
  &lt;li&gt;Easily scalable text and component sizing with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rem&lt;/code&gt; units in the CSS&lt;/li&gt;
  &lt;li&gt;Support for a wide gamut of HTML elements&lt;/li&gt;
  &lt;li&gt;Related posts (time-based, because Jekyll) below each post&lt;/li&gt;
  &lt;li&gt;Syntax highlighting, courtesy Pygments (the Python-based code snippet highlighter)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;lanyon-features&quot;&gt;Lanyon features&lt;/h3&gt;

&lt;p&gt;In addition to the features of Poole, Lanyon adds the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Toggleable sliding sidebar (built with only CSS) via &lt;strong&gt;☰&lt;/strong&gt; link in top corner&lt;/li&gt;
  &lt;li&gt;Sidebar includes support for textual modules and a dynamically generated navigation with active link support&lt;/li&gt;
  &lt;li&gt;Two orientations for content and sidebar, default (left sidebar) and &lt;a href=&quot;https://github.com/poole/lanyon#reverse-layout&quot;&gt;reverse&lt;/a&gt; (right sidebar), available via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt; classes&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/poole/lanyon#themes&quot;&gt;Eight optional color schemes&lt;/a&gt;, available via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt; classes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/poole/lanyon#readme&quot;&gt;Head to the readme&lt;/a&gt; to learn more.&lt;/p&gt;

&lt;h3 id=&quot;browser-support&quot;&gt;Browser support&lt;/h3&gt;

&lt;p&gt;Lanyon is by preference a forward-thinking project. In addition to the latest versions of Chrome, Safari (mobile and desktop), and Firefox, it is only compatible with Internet Explorer 9 and above.&lt;/p&gt;

&lt;h3 id=&quot;download&quot;&gt;Download&lt;/h3&gt;

&lt;p&gt;Lanyon is developed on and hosted with GitHub. Head to the &lt;a href=&quot;https://github.com/poole/lanyon&quot;&gt;GitHub repository&lt;/a&gt; for downloads, bug reports, and features requests.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Example content</title>
   <link href="/2020/04/02/example-content/"/>
   <updated>2020-04-02T00:00:00-04:00</updated>
   <id>/2020/04/02/example-content</id>
   <content type="html">&lt;div class=&quot;message&quot;&gt;
  Howdy! This is an example blog post that shows several types of HTML content supported in this theme.
&lt;/div&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis &lt;a href=&quot;#&quot;&gt;dis parturient montes&lt;/a&gt;, nascetur ridiculus mus. &lt;em&gt;Aenean eu leo quam.&lt;/em&gt; Pellentesque ornare sem lacinia quam venenatis vestibulum. Sed posuere consectetur est at lobortis. Cras mattis consectetur purus sit amet fermentum.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Curabitur blandit tempus porttitor. Nullam quis risus eget urna mollis ornare vel eu leo. Nullam id dolor id nibh ultricies vehicula ut id elit.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Etiam porta &lt;strong&gt;sem malesuada magna&lt;/strong&gt; mollis euismod. Cras mattis consectetur purus sit amet fermentum. Aenean lacinia bibendum nulla sed consectetur.&lt;/p&gt;

&lt;h2 id=&quot;inline-html-elements&quot;&gt;Inline HTML elements&lt;/h2&gt;

&lt;p&gt;HTML defines a long list of available inline tags, a complete list of which can be found on the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element&quot;&gt;Mozilla Developer Network&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;To bold text&lt;/strong&gt;, use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;strong&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;To italicize text&lt;/em&gt;, use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;em&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Abbreviations, like &lt;abbr title=&quot;HyperText Markup Langage&quot;&gt;HTML&lt;/abbr&gt; should use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;abbr&amp;gt;&lt;/code&gt;, with an optional &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;title&lt;/code&gt; attribute for the full phrase.&lt;/li&gt;
  &lt;li&gt;Citations, like &lt;cite&gt;— Mark otto&lt;/cite&gt;, should use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;cite&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;Deleted&lt;/del&gt; text should use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;del&amp;gt;&lt;/code&gt; and &lt;ins&gt;inserted&lt;/ins&gt; text should use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;ins&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Superscript &lt;sup&gt;text&lt;/sup&gt; uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;sup&amp;gt;&lt;/code&gt; and subscript &lt;sub&gt;text&lt;/sub&gt; uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;sub&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of these elements are styled by browsers with few modifications on our part.&lt;/p&gt;

&lt;h2 id=&quot;heading&quot;&gt;Heading&lt;/h2&gt;

&lt;p&gt;Vivamus sagittis lacus vel augue rutrum faucibus dolor auctor. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.&lt;/p&gt;

&lt;h3 id=&quot;code&quot;&gt;Code&lt;/h3&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis dis &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;code element&lt;/code&gt; montes, nascetur ridiculus mus.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Example can be run directly in your JavaScript console
&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Create a function that takes two arguments and returns the sum of those arguments
&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;adder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;return a + b&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Call the function
&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;adder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// &amp;gt; 8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Aenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa.&lt;/p&gt;

&lt;h3 id=&quot;lists&quot;&gt;Lists&lt;/h3&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Aenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Praesent commodo cursus magna, vel scelerisque nisl consectetur et.&lt;/li&gt;
  &lt;li&gt;Donec id elit non mi porta gravida at eget metus.&lt;/li&gt;
  &lt;li&gt;Nulla vitae elit libero, a pharetra augue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Donec ullamcorper nulla non metus auctor fringilla. Nulla vitae elit libero, a pharetra augue.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Vestibulum id ligula porta felis euismod semper.&lt;/li&gt;
  &lt;li&gt;Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.&lt;/li&gt;
  &lt;li&gt;Maecenas sed diam eget risus varius blandit sit amet non magna.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Cras mattis consectetur purus sit amet fermentum. Sed posuere consectetur est at lobortis.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;HyperText Markup Language (HTML)&lt;/dt&gt;
  &lt;dd&gt;The language used to describe and define the content of a Web page&lt;/dd&gt;

  &lt;dt&gt;Cascading Style Sheets (CSS)&lt;/dt&gt;
  &lt;dd&gt;Used to describe the appearance of Web content&lt;/dd&gt;

  &lt;dt&gt;JavaScript (JS)&lt;/dt&gt;
  &lt;dd&gt;The programming language used to build advanced Web sites and applications&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Nullam quis risus eget urna mollis ornare vel eu leo.&lt;/p&gt;

&lt;h3 id=&quot;tables&quot;&gt;Tables&lt;/h3&gt;

&lt;p&gt;Aenean lacinia bibendum nulla sed consectetur. Lorem ipsum dolor sit amet, consectetur adipiscing elit.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Upvotes&lt;/th&gt;
      &lt;th&gt;Downvotes&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tfoot&gt;
    &lt;tr&gt;
      &lt;td&gt;Totals&lt;/td&gt;
      &lt;td&gt;21&lt;/td&gt;
      &lt;td&gt;23&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tfoot&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Alice&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bob&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Charlie&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Nullam id dolor id nibh ultricies vehicula ut id elit. Sed posuere consectetur est at lobortis. Nullam quis risus eget urna mollis ornare vel eu leo.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Want to see something else added? &lt;a href=&quot;https://github.com/poole/poole/issues/new&quot;&gt;Open an issue.&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>What's Jekyll?</title>
   <link href="/2020/04/01/whats-jekyll/"/>
   <updated>2020-04-01T00:00:00-04:00</updated>
   <id>/2020/04/01/whats-jekyll</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;https://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; is a static site generator, an open-source tool for creating simple yet powerful websites of all shapes and sizes. From &lt;a href=&quot;https://github.com/mojombo/jekyll/blob/master/README.markdown&quot;&gt;the project’s readme&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Jekyll is a simple, blog aware, static site generator. It takes a template directory […] and spits out a complete, static website suitable for serving with Apache or your favorite web server. This is also the engine behind GitHub Pages, which you can use to host your project’s page or blog right here from GitHub.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It’s an immensely useful tool and one we encourage you to use here with Lanyon.&lt;/p&gt;

&lt;p&gt;Find out more by &lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;visiting the project on GitHub&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>What script is run when a package is install ?</title>
   <link href="/index.php/2009/05/02/what-script-is-run-when-a-rpm-is-installed/"/>
   <updated>2009-05-02T07:00:33-04:00</updated>
   <id>/index.php/2009/05/02/what-script-is-run-when-a-rpm-is-installed</id>
   <content type="html">&lt;p&gt;Today, we will look at what script is run when you install a rpm. In our example we will look at the script that is run when we perform a kernel installation.  First, let’s look what kernel version is installed on our system, with the this command :&lt;/p&gt;

&lt;pre&gt;&lt;strong&gt;# rpm -qa | grep -i kernel&lt;/strong&gt;
kernel-2.6.18-92.1.22.el5
kernel-2.6.18-92.1.18.el5
kernel-2.6.18-128.1.6.el5
kernel-headers-2.6.18-128.1.6.el5
#&lt;/pre&gt;

&lt;p&gt;Let’s view the script that is run when the kernel 2.6.18-128.1.6 is install ;&lt;/p&gt;

&lt;pre&gt;&lt;strong&gt;# rpm -q --scripts kernel-2.6.18-128.1.6.el5&lt;/strong&gt;
postinstall scriptlet (using /bin/sh):
if [ `uname -i` == &quot;x86_64&quot; -o `uname -i` == &quot;i386&quot; ]; then
   if [ -f /etc/sysconfig/kernel ]; then
      /bin/sed -i -e 's/^DEFAULTKERNEL=kernel-smp$/DEFAULTKERNEL=kernel/' /etc/sysconfig/kernel || exit $?
   fi
fi
/sbin/new-kernel-pkg --package kernel --mkinitrd --depmod --install 2.6.18-128.1.6.el5 || exit $?
if [ -x /sbin/weak-modules ]
   then
   /sbin/weak-modules --add-kernel 2.6.18-128.1.6.el5 || exit $?
fi
preuninstall scriptlet (using /bin/sh):
/sbin/new-kernel-pkg --rminitrd --rmmoddep --remove 2.6.18-128.1.6.el5 || exit $?
if [ -x /sbin/weak-modules ]
   then
   /sbin/weak-modules --remove-kernel 2.6.18-128.1.6.el5 || exit $?
fi
#&lt;/pre&gt;
</content>
 </entry>
 

</feed>
